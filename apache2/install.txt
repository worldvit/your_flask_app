# 구성하는 인프라의 IP에 따라 변경해야하는 부분
1. .env 파일 : DB_HOST=10.10.8.4
2. wsgi.py 파일 : ServerName kevin.itskillboost.com
3. app.py 파일 :  'host': os.getenv('DB_HOST', '10.10.8.4')
4. mariadb 구성할때 :
CREATE USER 'flask_user'@'10.10.8.3' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL PRIVILEGES ON flask_auth_db.* TO 'flask_user'@'10.10.8.3';

#===10.10.8.3===============================
sudo -i
sudo apt update
sudo apt install apache2 libapache2-mod-wsgi-py3 git
sudo a2enmod wsgi

cd /var/www/html/
git clone https://github.com/worldvit/your_flask_app.git
sudo chown -R www-data: /var/www/html/your_flask_app
cd /etc/apache2/sites-available
a2dissite 000-default.conf

vim /etc/apache2/sites-available/flask_auth.conf
[ flask_auth.conf 파일 내용]
WSGIDaemonProcess flask_auth_app user=www-data group=www-data threads=5 python-path=/var/www/html/your_flask_app/venv/lib/python3.12/site-packages
WSGIPythonPath /var/www/html/your_flask_app

<VirtualHost *:80>
    # ServerName은 반드시 인증서를 발급받은 도메인 이름과 일치해야 합니다.
    ServerName kevin.itskillboost.com
    ServerAdmin webmaster@localhost

    WSGIScriptAlias / /var/www/html/your_flask_app/wsgi.py

    <Directory /var/www/html/your_flask_app>
        WSGIProcessGroup flask_auth_app
        WSGIApplicationGroup %{GLOBAL}
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/flask_auth_error.log
    CustomLog ${APACHE_LOG_DIR}/flask_auth_access.log combined
</VirtualHost>

# 명령으로 설정 파일에 문법 오류가 없는지 확인
sudo apache2ctl configtest
a2ensite flask_auth.conf
systemctl reload apache2
systemctl restart apache2

# apache2 : HTTPS 서비스(옵션) : kevin.itskillboost.com (dns에 등록된 URL)
sudo apt update
sudo apt install -y certbot python3-certbot-apache
sudo certbot --apache --non-interactive --agree-tos -m admin@itskillboost.com -d kevin.itskillboost.com
sudo certbot renew --dry-run

# nginx : HTTPS 서비스(옵션) : kevin.itskillboost.com (dns에 등록된 URL)
sudo apt update
sudo apt install -y certbot python3-certbot-nginx
sudo certbot --nginx --non-interactive --agree-tos -m admin@itskillboost.com -d kevin.itskillboost.com
sudo certbot renew --dry-run


#===10.10.8.4===============================
apt update
apt install mariadb-server mariadb-client -y
sed -i '/bind-address/s/127.0.0.1/0.0.0.0/' \
/etc/mysql/mariadb.conf.d/50-server.cnf
systemctl enable --now mariadb
systemctl restart mariadb

-- MariaDB 서버(10.10.8.4)에서 root 사용자로 접속하여 다음 명령어들을 실행합니다.
sudo mysql -u root -p

-- 1. Flask 애플리케이션을 위한 데이터베이스 생성
CREATE DATABASE flask_auth_db;

-- 2. Flask 애플리케이션이 원격(10.10.8.3)에서 접속할 수 있는 사용자 생성 및 권한 부여
-- '10.10.8.3'은 Flask 애플리케이션이 실행되는 서버의 실제 IP 주소입니다.
-- 'P@ssw0rd'는 설정된 비밀번호입니다.
CREATE USER 'flask_user'@'10.10.8.3' IDENTIFIED BY 'P@ssw0rd';

-- 3. 생성된 사용자에게 데이터베이스에 대한 모든 권한 부여
GRANT ALL PRIVILEGES ON flask_auth_db.* TO 'flask_user'@'10.10.8.3';

-- (선택 사항: 만약 로그에 'Host master is not allowed' 오류가 계속 보인다면, 아래 명령도 추가)
-- 이는 MariaDB가 10.10.8.3 IP를 'master'라는 호스트명으로 역변환하려 시도할 때 필요할 수 있습니다.
-- CREATE USER 'flask_user'@'master' IDENTIFIED BY 'P@ssw0rd';
-- GRANT ALL PRIVILEGES ON flask_auth_db.* TO 'flask_user'@'master';

-- 4. 변경된 권한을 즉시 적용
FLUSH PRIVILEGES;

-- 5. 생성된 데이터베이스 사용을 선언 (이후 테이블 생성 명령들은 이 DB 안에서 실행됨)
USE flask_auth_db;

-- 6. 사용자 인증을 위한 'users' 테이블 생성
-- ID, 사용자명(고유), 해싱된 비밀번호, 생성일시를 저장합니다.
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 7. 게시판 기능을 위한 'board' 테이블 생성
-- 게시글의 ID, 작성자(user_id), 제목, 내용, 작성/수정일시를 저장합니다.
-- user_id는 users 테이블의 id를 참조하며, 사용자 삭제 시 게시글도 삭제됩니다 (ON DELETE CASCADE).
CREATE TABLE board (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- (참고: 이전에 블로그 기능 추가를 위해 'board' 테이블에 'type' 컬럼을 추가했던 ALTER TABLE 명령)
-- ALTER TABLE board ADD COLUMN type ENUM('board', 'blog') NOT NULL DEFAULT 'board';
-- (이후 블로그 기능 취소로 인해 이 칼럼은 삭제되었습니다.)

-- 8. 게시글에 대한 댓글을 위한 'comments' 테이블 생성
-- 댓글의 ID, 연결된 게시글(board_id), 작성자(user_id), 내용, 작성일시를 저장합니다.
-- board_id와 user_id는 각각 board 및 users 테이블을 참조하며, 원본 삭제 시 댓글도 삭제됩니다.
CREATE TABLE comments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    board_id INT NOT NULL,
    user_id INT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (board_id) REFERENCES board(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- 9. 개인 일기장 기능을 위한 'diaries' 테이블 생성
-- 일기 ID, 작성자(user_id), 작성 날짜, 제목, 내용을 저장합니다.
-- user_id와 entry_date는 고유하여, 한 사용자는 특정 날짜에 하나의 일기만 작성 가능합니다.
CREATE TABLE diaries (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    entry_date DATE NOT NULL,
    title VARCHAR(255),
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE (user_id, entry_date)
);

-- 10. 개인 To-Do List 기능을 위한 'todos' 테이블 생성
-- To-Do ID, 작성자(user_id), 할 일 내용, 마감일, 상태, 생성일시를 저장합니다.
-- status는 정의된 ENUM 값들만 가질 수 있습니다.
CREATE TABLE todos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    task VARCHAR(500) NOT NULL,
    due_date DATE NULL,
    status ENUM('미완료', '진행중', '완료', '기간연장') NOT NULL DEFAULT '미완료',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- MariaDB 세션 종료
EXIT;
