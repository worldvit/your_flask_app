import os
from flask import Flask, render_template, request, redirect, url_for, session, flash
from werkzeug.security import generate_password_hash, check_password_hash
import pymysql.cursors
from dotenv import load_dotenv, find_dotenv

# .env 파일의 절대 경로를 명시하여 환경 변수를 로드합니다.
# Apache/mod_wsgi 환경에서 .env 로딩 문제가 발생할 경우를 대비합니다.
dotenv_path = find_dotenv('/var/www/html/your_flask_app/.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    print("DEBUG: .env variables loaded from explicit path.") # 디버깅용 로그
else:
    print(f"WARNING: .env file not found at {dotenv_path}. Environment variables might not be loaded.") # 디버깅용 로그

# Flask 애플리케이션 인스턴스 생성
app = Flask(__name__)

# FLASK_SECRET_KEY 로딩 및 처리 로직
# 환경 변수에서 SECRET_KEY를 가져옵니다. 없을 경우 임시 키를 생성합니다.
# 프로덕션 환경에서는 반드시 .env에 유효하고 고유한 키가 존재해야 합니다.
flask_secret_key = os.getenv('FLASK_SECRET_KEY')
if not flask_secret_key:
    flask_secret_key = os.urandom(24).hex() # 임시 키 생성
    print(f"WARNING: FLASK_SECRET_KEY not found in .env. Using newly generated key for this run: {flask_secret_key}") # 디버깅용 로그
    print("Please add 'FLASK_SECRET_KEY={}' to your .env file for persistent security.".format(flask_secret_key)) # 디버깅용 로그

app.secret_key = flask_secret_key
print(f"DEBUG: Flask secret key loaded: {'exists' if app.secret_key else 'NOT FOUND'}") # 디버깅용 로그


# 데이터베이스 연결 설정
# 환경 변수가 설정되지 않았을 경우 사용할 기본값(폴백)을 지정합니다.
DB_CONFIG = {
    'host': os.getenv('DB_HOST', '10.10.8.4'),
    'user': os.getenv('DB_USER', 'flask_user'),
    'password': os.getenv('DB_PASSWORD', 'P@ssw0rd'),
    'db': os.getenv('DB_NAME', 'flask_auth_db'),
    'charset': 'utf8mb4',
    'cursorclass': pymysql.cursors.DictCursor
}
# 환경 변수 로드 상태 확인을 위한 디버깅 로그 (필요 없으면 주석 처리 또는 삭제)
# print(f"DEBUG_ENV: FLASK_SECRET_KEY={os.getenv('FLASK_SECRET_KEY')}")
# print(f"DEBUG_ENV: DB_HOST={os.getenv('DB_HOST')}")
# print(f"DEBUG_ENV: DB_USER={os.getenv('DB_USER')}")
# print(f"DEBUG_ENV: DB_PASSWORD={os.getenv('DB_PASSWORD')}")
# print(f"DEBUG_ENV: DB_NAME={os.getenv('DB_NAME')}")


def get_db_connection():
    """데이터베이스 연결을 설정하고 반환합니다."""
    print("DEBUG: Attempting to get DB connection...") # 디버깅용 로그
    try:
        conn = pymysql.connect(**DB_CONFIG)
        print("DEBUG: DB connection successful!") # 디버깅용 로그
        return conn
    except pymysql.Error as e:
        print(f"DEBUG: DB connection failed in get_db_connection: {e}") # 디버깅용 로그
        flash('Database connection error. Please try again later.', 'error')
        raise

# --- 사용자 인증 관련 라우트 ---

@app.route('/')
def index():
    """기본 인증 페이지를 렌더링합니다."""
    return render_template('default.html')

@app.route('/register', methods=['POST'])
def register():
    """사용자 등록을 처리합니다."""
    username = request.form['username'].strip()
    password = request.form['password'].strip()

    if not username or not password:
        flash('Username and password cannot be empty.', 'error')
        return redirect(url_for('index'))

    hashed_password = generate_password_hash(password)

    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            # 사용자 이름 중복 확인
            cursor.execute("SELECT id FROM users WHERE username = %s", (username,))
            if cursor.fetchone():
                flash('Username already exists. Please choose a different one.', 'error')
                return redirect(url_for('index'))

            # 새 사용자 삽입
            sql = "INSERT INTO users (username, password) VALUES (%s, %s)"
            cursor.execute(sql, (username, hashed_password))
        conn.commit() # 트랜잭션 커밋
        flash('Registration successful! You can now log in.', 'success')
    except Exception as e:
        print(f"Database error during registration: {e}") # 디버깅용 로그
        flash('Registration failed. Please try again later.', 'error')
    finally:
        if conn:
            conn.close()
    return redirect(url_for('index'))

@app.route('/login', methods=['POST'])
def login():
    """사용자 로그인을 처리합니다."""
    username = request.form['username'].strip()
    password = request.form['password'].strip()
    print(f"DEBUG: Login attempt for user: {username}") # 디버깅용 로그

    if not username or not password:
        print("DEBUG: Username or password empty for login.") # 디버깅용 로그
        flash('Please enter both username and password.', 'error')
        return redirect(url_for('index'))

    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            sql = "SELECT id, username, password FROM users WHERE username = %s"
            cursor.execute(sql, (username,))
            user = cursor.fetchone()

            # 비밀번호 확인
            if user and check_password_hash(user['password'], password):
                # 인증 성공 시 세션에 로그인 정보 저장
                session['loggedin'] = True
                session['id'] = user['id']
                session['username'] = user['username']
                print(f"DEBUG: User {username} logged in successfully. Redirecting to dashboard.") # 디버깅용 로그
                flash(f'Welcome back, {user["username"]}!', 'success')
                return redirect(url_for('dashboard')) # 보호된 페이지로 리디렉션
            else:
                print(f"DEBUG: Login failed for {username}: Incorrect credentials.") # 디버깅용 로그
                flash('Incorrect username or password. Please try again.', 'error')
    except Exception as e:
        print(f"DEBUG: General error during login processing: {e}") # 디버깅용 로그
        flash('Login failed due to a server error. Please try again later.', 'error')
    finally:
        if conn:
            conn.close()
            print("DEBUG: DB connection closed in login route.") # 디버깅용 로그
    return redirect(url_for('index'))

@app.route('/logout')
def logout():
    """현재 사용자를 로그아웃합니다."""
    session.pop('loggedin', None)
    session.pop('id', None)
    session.pop('username', None)
    flash('You have been successfully logged out.', 'success')
    return redirect(url_for('index'))

@app.route('/dashboard')
def dashboard():
    """로그인한 사용자만 접근할 수 있는 보호된 페이지입니다. 게시판 목록으로 리디렉션됩니다."""
    if 'loggedin' in session:
        return redirect(url_for('board_list')) # 대시보드 대신 바로 게시판으로 리디렉션
    flash('Please log in to access this page.', 'error')
    return redirect(url_for('index'))


# --- 게시판 관련 라우트 ---

@app.route('/board')
def board_list():
    """검색 기능을 포함한 게시글 목록을 표시합니다."""
    if 'loggedin' not in session:
        flash('Please log in to view the board.', 'error')
        return redirect(url_for('index'))

    search_query = request.args.get('query', '').strip() # URL에서 'query' 파라미터 가져옴

    conn = None
    posts = []
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            sql = "SELECT b.id, b.title, b.content, b.created_at, b.updated_at, u.username " \
                  "FROM board b JOIN users u ON b.user_id = u.id"
            params = []

            # 검색 쿼리가 있는 경우 WHERE 절 추가
            if search_query:
                sql += " WHERE b.title LIKE %s OR b.content LIKE %s"
                params.append(f"%{search_query}%")
                params.append(f"%{search_query}%")

            sql += " ORDER BY b.created_at DESC" # 정렬 기준은 최신순 유지

            cursor.execute(sql, params) # 파라미터화된 쿼리 실행
            posts = cursor.fetchall()
    except Exception as e:
        print(f"Database error fetching board posts with search: {e}")
        flash('Failed to load board posts. Please try again later.', 'error')
    finally:
        if conn:
            conn.close()
    # 검색 쿼리를 템플릿으로 전달하여 검색창에 유지되도록 함
    return render_template('board_list.html', posts=posts, username=session['username'], search_query=search_query)

@app.route('/board/write', methods=['GET', 'POST'])
def write_post():
    """새 게시글 작성을 처리합니다."""
    if 'loggedin' not in session:
        flash('Please log in to write a post.', 'error')
        return redirect(url_for('index'))

    if request.method == 'POST':
        title = request.form['title'].strip()
        content = request.form['content'].strip()
        user_id = session['id']

        if not title or not content:
            flash('Title and content cannot be empty.', 'error')
            return redirect(url_for('write_post'))

        conn = None
        try:
            conn = get_db_connection()
            with conn.cursor() as cursor:
                sql = "INSERT INTO board (user_id, title, content) VALUES (%s, %s, %s)"
                cursor.execute(sql, (user_id, title, content))
            conn.commit()
            flash('Post created successfully!', 'success')
        except Exception as e:
            print(f"Database error creating post: {e}")
            flash('Failed to create post. Please try again later.', 'error')
        finally:
            if conn:
                conn.close()
        return redirect(url_for('board_list'))
    return render_template('write_post.html', username=session['username'])

@app.route('/board/view/<int:post_id>')
def view_post(post_id):
    """단일 게시글과 해당 댓글을 표시합니다."""
    if 'loggedin' not in session:
        flash('Please log in to view posts.', 'error')
        return redirect(url_for('index'))

    conn = None
    post = None
    comments = []
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            sql_post = "SELECT b.id, b.title, b.content, b.created_at, b.updated_at, b.user_id, u.username " \
                       "FROM board b JOIN users u ON b.user_id = u.id WHERE b.id = %s"
            cursor.execute(sql_post, (post_id,))
            post = cursor.fetchone()

            if not post:
                flash('Post not found.', 'error')
                return redirect(url_for('board_list'))

            sql_comments = "SELECT c.id, c.content, c.created_at, u.username, c.user_id " \
                           "FROM comments c JOIN users u ON c.user_id = u.id WHERE c.board_id = %s ORDER BY c.created_at ASC"
            cursor.execute(sql_comments, (post_id,))
            comments = cursor.fetchall()

    except Exception as e:
        print(f"Database error viewing post: {e}")
        flash('Failed to load post. Please try again later.', 'error')
    finally:
        if conn:
            conn.close()
    return render_template('view_post.html', post=post, comments=comments, username=session['username'])

@app.route('/board/edit/<int:post_id>', methods=['GET', 'POST'])
def edit_post(post_id):
    """기존 게시글 편집을 처리합니다."""
    if 'loggedin' not in session:
        flash('Please log in to edit posts.', 'error')
        return redirect(url_for('index'))

    conn = None
    post = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            sql = "SELECT id, title, content, user_id FROM board WHERE id = %s"
            cursor.execute(sql, (post_id,))
            post = cursor.fetchone()

            if not post:
                flash('Post not found.', 'error')
                return redirect(url_for('board_list'))

            if post['user_id'] != session['id']:
                flash('You are not authorized to edit this post.', 'error')
                return redirect(url_for('view_post', post_id=post_id))

        if request.method == 'POST':
            title = request.form['title'].strip()
            content = request.form['content'].strip()

            if not title or not content:
                flash('Title and content cannot be empty.', 'error')
                return redirect(url_for('edit_post', post_id=post_id))

            with conn.cursor() as cursor:
                sql = "UPDATE board SET title = %s, content = %s WHERE id = %s"
                cursor.execute(sql, (title, content, post_id))
            conn.commit()
            flash('Post updated successfully!', 'success')
            return redirect(url_for('view_post', post_id=post_id))
    except Exception as e:
        print(f"Database error editing post: {e}")
        flash('Failed to edit post. Please try again later.', 'error')
    finally:
        if conn:
            conn.close()
    return render_template('edit_post.html', post=post, username=session['username'])

@app.route('/board/delete/<int:post_id>', methods=['POST'])
def delete_post(post_id):
    """게시글 삭제를 처리합니다."""
    if 'loggedin' not in session:
        flash('Please log in to delete posts.', 'error')
        return redirect(url_for('index'))

    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            sql_check = "SELECT user_id FROM board WHERE id = %s"
            cursor.execute(sql_check, (post_id,))
            post_owner = cursor.fetchone()

            if not post_owner:
                flash('Post not found.', 'error')
                return redirect(url_for('board_list'))

            if post_owner['user_id'] != session['id']:
                flash('You are not authorized to delete this post.', 'error')
                return redirect(url_for('view_post', post_id=post_id))

            sql_delete = "DELETE FROM board WHERE id = %s"
            cursor.execute(sql_delete, (post_id,))
        conn.commit()
        flash('Post deleted successfully!', 'success')
    except Exception as e:
        print(f"Database error deleting post: {e}")
        flash('Failed to delete post. Please try again later.', 'error')
    finally:
        if conn:
            conn.close()
    return redirect(url_for('board_list'))


@app.route('/comment/add/<int:post_id>', methods=['POST'])
def add_comment(post_id):
    """게시글에 댓글 추가를 처리합니다."""
    if 'loggedin' not in session:
        flash('Please log in to add comments.', 'error')
        return redirect(url_for('index'))

    content = request.form['content'].strip()
    user_id = session['id']

    if not content:
        flash('Comment content cannot be empty.', 'error')
        return redirect(url_for('view_post', post_id=post_id))

    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT id FROM board WHERE id = %s", (post_id,))
            if not cursor.fetchone():
                flash('Post not found for commenting.', 'error')
                return redirect(url_for('board_list'))

            sql = "INSERT INTO comments (board_id, user_id, content) VALUES (%s, %s, %s)"
            cursor.execute(sql, (post_id, user_id, content))
        conn.commit()
        flash('Comment added successfully!', 'success')
    except Exception as e:
        print(f"Database error adding comment: {e}")
        flash('Failed to add comment. Please try again later.', 'error')
    finally:
        if conn:
            conn.close()
    return redirect(url_for('view_post', post_id=post_id))

# 개발용 블록입니다. Apache/mod_wsgi로 배포 시에는 사용되지 않습니다.
if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
